version: '3'
services:

  nessie:
    image: ghcr.io/projectnessie/nessie
    ports:
      # API port
      - "19120:19120"
      # Management port (metrics and health checks)
      - "9000:9000"
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - nessie.server.authentication.enabled=false
      # Object store settings.
      # This example uses MinIO as the object store.
      - nessie.catalog.default-warehouse=warehouse
      - nessie.catalog.warehouses.warehouse.location=s3://demobucket/
      - nessie.catalog.service.s3.default-options.region=us-east-1
      - nessie.catalog.service.s3.default-options.path-style-access=true
      - nessie.catalog.service.s3.default-options.access-key.name=minioadmin
      - nessie.catalog.service.s3.default-options.access-key.secret=minioadmin
      # MinIO endpoint for Nessie server
      - nessie.catalog.service.s3.default-options.endpoint=http://minio:9000/
      # MinIO endpoint for clients (on the Podman/Docker host)
      - nessie.catalog.service.s3.default-options.external-endpoint=http://127.0.0.1:9003/

  # MinIO
  # UI: http://localhost:9004/login
  minio:
    image: minio/minio
    hostname: minio
    ports:
      - 9003:9000
      - 9004:9001
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_ADDRESS=:9000
      - MINIO_CONSOLE_ADDRESS=:9001
    container_name: minio
    command: server /data --console-address ":9001"
    volumes:
      - D:/Krzys/tmp:/data
    healthcheck:
      test: "bash -c '[[ \"$(exec 3<>/dev/tcp/localhost/9000 && echo -e '\"'\"'GET /minio/health/live HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n'\"'\"' >&3 && cat <&3 | head -n 1)\" == *\"200 OK\"* ]] || exit 1'"
      interval: 5s
      timeout: 2s
      retries: 15

  # Create MinIO bucket and exit
  minio-setup:
    image: quay.io/minio/minio:RELEASE.2024-07-16T23-46-41Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: /bin/bash
    restart: "no"
    command: [
      "-c",
      "mc alias set myminio http://minio:9000/ minioadmin minioadmin ; mc admin info myminio ; mc mb myminio/demobucket --ignore-existing ; mc mb minio/iceberg --ignore-existing ; mc policy set public minio/demobucket ; mc policy set public minio/iceberg"
    ]

  # Minio Client Container
  # mc:
  #   depends_on:
  #     - minio
  #   image: minio/mc
  #   environment:
  #     - AWS_ACCESS_KEY_ID=minioadmin
  #     - AWS_SECRET_ACCESS_KEY=minioadmin
  #     - AWS_REGION=us-east-1
  #     - AWS_DEFAULT_REGION=us-east-1
  #   entrypoint: >
  #     /bin/sh -c "
  #     until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
  #     /usr/bin/mc rm -r --force minio/warehouse;
  #     /usr/bin/mc mb minio/warehouse;
  #     /usr/bin/mc mb minio/iceberg;
  #     /usr/bin/mc policy set public minio/warehouse;
  #     /usr/bin/mc policy set public minio/iceberg;
  #     tail -f /dev/null
  #     "

  # Trino
  # UI: http://localhost:8080/ui/login.html
  # run: 
  #  docker exec -it trino_iceberg-trino-1 trino
  #  select count(*) from tpch.sf1.nation;
  #  quit
  trino:
    ports:
      - "8080:8080"
    image: "trinodb/trino"
    volumes:
      - "./iceberg.properties:/etc/trino/catalog/example.properties"
      - "./post-init.sh:/tmp/post-init.sh"
      - "./post-init.sql:/tmp/post-init.sql"
    command:
      - "/tmp/post-init.sh"

  